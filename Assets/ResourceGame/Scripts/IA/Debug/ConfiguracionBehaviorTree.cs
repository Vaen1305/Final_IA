using UnityEngine;

[System.Serializable]
public class ConfiguracionBehaviorTree : MonoBehaviour
{
    [Header("Gu√≠a de Configuraci√≥n del Behavior Tree")]
    [TextArea(15, 20)]
    public string guiaConfiguracion = @"
ESTRUCTURA RECOMENDADA PARA EL BEHAVIOR TREE DEL CIERVO:

ROOT (Selector)
‚îú‚îÄ‚îÄ SECUENCIA: Huida Urgente
‚îÇ   ‚îú‚îÄ‚îÄ ActionViewLobo (Conditional)
‚îÇ   ‚îî‚îÄ‚îÄ ActionRunAway (Action)
‚îÇ
‚îú‚îÄ‚îÄ SECUENCIA: Evasi√≥n
‚îÇ   ‚îú‚îÄ‚îÄ ActionViewJabali (Conditional)
‚îÇ   ‚îî‚îÄ‚îÄ ActionAvoid (Action)
‚îÇ
‚îú‚îÄ‚îÄ SECUENCIA: Descanso
‚îÇ   ‚îú‚îÄ‚îÄ ActionIsTired (Conditional)
‚îÇ   ‚îî‚îÄ‚îÄ ActionRest (Action)
‚îÇ
‚îî‚îÄ‚îÄ ActionWander (Action - Por defecto)

PRIORIDADES (de mayor a menor):
1. Huir del Lobo (m√°xima prioridad)
2. Evitar al Jabal√≠
3. Descansar si est√° cansado
4. Deambular (comportamiento por defecto)

NOTAS IMPORTANTES:
- Usar SELECTOR como ra√≠z para que eval√∫e en orden de prioridad
- Usar SECUENCIAS para condici√≥n + acci√≥n
- ActionViewLobo y ActionViewJabali deben devolver Success cuando detectan
- ActionIsTired debe devolver Success cuando stamina <= 30%
- ActionRest debe devolver Running mientras descansa, Success cuando termina
- ActionWander es el comportamiento por defecto (√∫ltimo en el selector)
";

    [Header("Debug")]
    public bool mostrarEstructuraActual = true;
    
    private void Start()
    {
        if (mostrarEstructuraActual)
        {
            Debug.Log($"üìã CONFIGURACI√ìN BEHAVIOR TREE PARA {gameObject.name}:");
            Debug.Log(guiaConfiguracion);
        }
    }
    
    [ContextMenu("Mostrar Gu√≠a de Configuraci√≥n")]
    public void MostrarGuia()
    {
        Debug.Log($"üìã GU√çA DE CONFIGURACI√ìN BEHAVIOR TREE:");
        Debug.Log(guiaConfiguracion);
        
        // Verificar componentes necesarios
        VerificarComponentes();
    }
    
    private void VerificarComponentes()
    {
        Debug.Log($"\nüîç VERIFICANDO COMPONENTES NECESARIOS:");
        
        var healthCiervo = GetComponent<HealthCiervo>();
        var aiVehicle = GetComponent<AICharacterVehicleCiervo>();
        
        Debug.Log($"HealthCiervo: {(healthCiervo != null ? "‚úÖ ENCONTRADO" : "‚ùå FALTANTE")}");
        Debug.Log($"AICharacterVehicleCiervo: {(aiVehicle != null ? "‚úÖ ENCONTRADO" : "‚ùå FALTANTE")}");
        
        if (aiVehicle != null && aiVehicle._VisionSensor != null)
        {
            Debug.Log($"VisionSensor: ‚úÖ ENCONTRADO");
        }
        else
        {
            Debug.Log($"VisionSensor: ‚ùå FALTANTE O NO CONFIGURADO");
        }
        
        Debug.Log($"\nüí° SCRIPTS DE ACCIONES NECESARIOS:");
        Debug.Log($"- ActionViewLobo.cs");
        Debug.Log($"- ActionViewJabali.cs");
        Debug.Log($"- ActionIsTired.cs");
        Debug.Log($"- ActionRest.cs");
        Debug.Log($"- ActionRunAway.cs");
        Debug.Log($"- ActionAvoid.cs");
        Debug.Log($"- ActionWander.cs");
    }
    
    [ContextMenu("Verificar Scripts de Acciones")]
    public void VerificarScriptsAcciones()
    {
        Debug.Log($"üîç VERIFICANDO SCRIPTS DE ACCIONES...");
        
        // Aqu√≠ podr√≠as agregar verificaciones adicionales si es necesario
        Debug.Log($"‚úÖ Verificaci√≥n completada. Revisa la consola para detalles.");
    }
}
