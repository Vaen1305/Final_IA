using UnityEngine;

/// <summary>
/// Verificador autom√°tico de la configuraci√≥n de la escena
/// </summary>
public class VerificadorEscena : MonoBehaviour
{
    [Header("Configuraci√≥n")]
    public bool verificarAlInicio = true;
    
    private void Start()
    {
        if (verificarAlInicio)
        {
            VerificarConfiguracion();
        }
    }
    
    [ContextMenu("Verificar Configuraci√≥n Completa")]
    public void VerificarConfiguracion()
    {
        Debug.Log("üîç === VERIFICANDO CONFIGURACI√ìN DE LA ESCENA ===");
        
        VerificarAnimales();
        VerificarObjetos();
        VerificarTags();
        VerificarNavMesh();
        
        Debug.Log("‚úÖ === VERIFICACI√ìN COMPLETADA ===");
    }
    
    private void VerificarAnimales()
    {
        Debug.Log("ü¶å Verificando animales...");
        
        // Buscar Ciervo
        HealthCiervo[] ciervos = FindObjectsOfType<HealthCiervo>();
        Debug.Log($"  Ciervos encontrados: {ciervos.Length}");
        foreach (var ciervo in ciervos)
        {
            VerificarComponentesCiervo(ciervo);
        }
        
        // Buscar Lobo
        HealthLobo[] lobos = FindObjectsOfType<HealthLobo>();
        Debug.Log($"  Lobos encontrados: {lobos.Length}");
        foreach (var lobo in lobos)
        {
            VerificarComponentesLobo(lobo);
        }
        
        // Buscar Jabal√≠
        HealthJabali[] jabalies = FindObjectsOfType<HealthJabali>();
        Debug.Log($"  Jabal√≠es encontrados: {jabalies.Length}");
        foreach (var jabali in jabalies)
        {
            VerificarComponentesJabali(jabali);
        }
    }
    
    private void VerificarComponentesCiervo(HealthCiervo ciervo)
    {
        GameObject obj = ciervo.gameObject;
        Debug.Log($"  ü¶å Verificando Ciervo: {obj.name}");
        
        // Verificar componentes necesarios
        if (!obj.GetComponent<AICharacterVehicleCiervo>())
            Debug.LogError($"    ‚ùå Falta AICharacterVehicleCiervo en {obj.name}");
        
        if (!obj.GetComponent<UnityEngine.AI.NavMeshAgent>())
            Debug.LogError($"    ‚ùå Falta NavMeshAgent en {obj.name}");
            
        if (!obj.GetComponent<BehaviorDesigner.Runtime.BehaviorTree>())
            Debug.LogError($"    ‚ùå Falta BehaviorTree en {obj.name}");
        
        // Verificar valores de salud
        if (ciervo.hungryThreshold <= 0 || ciervo.sleepyThreshold <= 0)
            Debug.LogWarning($"    ‚ö†Ô∏è Thresholds pueden estar mal configurados en {obj.name}");
            
        Debug.Log($"    ‚úÖ Ciervo {obj.name} configurado correctamente");
    }
    
    private void VerificarComponentesLobo(HealthLobo lobo)
    {
        GameObject obj = lobo.gameObject;
        Debug.Log($"  üê∫ Verificando Lobo: {obj.name}");
        
        if (!obj.GetComponent<AICharacterVehicleLobo>())
            Debug.LogError($"    ‚ùå Falta AICharacterVehicleLobo en {obj.name}");
        
        if (!obj.GetComponent<UnityEngine.AI.NavMeshAgent>())
            Debug.LogError($"    ‚ùå Falta NavMeshAgent en {obj.name}");
            
        if (!obj.GetComponent<BehaviorDesigner.Runtime.BehaviorTree>())
            Debug.LogError($"    ‚ùå Falta BehaviorTree en {obj.name}");
            
        Debug.Log($"    ‚úÖ Lobo {obj.name} configurado correctamente");
    }
    
    private void VerificarComponentesJabali(HealthJabali jabali)
    {
        GameObject obj = jabali.gameObject;
        Debug.Log($"  üêó Verificando Jabal√≠: {obj.name}");
        
        if (!obj.GetComponent<AICharacterVehicleJabali>())
            Debug.LogError($"    ‚ùå Falta AICharacterVehicleJabali en {obj.name}");
        
        if (!obj.GetComponent<UnityEngine.AI.NavMeshAgent>())
            Debug.LogError($"    ‚ùå Falta NavMeshAgent en {obj.name}");
            
        if (!obj.GetComponent<BehaviorDesigner.Runtime.BehaviorTree>())
            Debug.LogError($"    ‚ùå Falta BehaviorTree en {obj.name}");
        
        if (jabali.territoryRadius <= 0)
            Debug.LogWarning($"    ‚ö†Ô∏è Radio de territorio no configurado en {obj.name}");
            
        Debug.Log($"    ‚úÖ Jabal√≠ {obj.name} configurado correctamente");
    }
    
    private void VerificarObjetos()
    {
        Debug.Log("üåø Verificando objetos de hierba...");
        
        GameObject[] grass = GameObject.FindGameObjectsWithTag("Grass");
        GameObject[] hierba = GameObject.FindGameObjectsWithTag("Hierba");
        
        int totalHierba = grass.Length + hierba.Length;
        Debug.Log($"  Objetos con tag 'Grass': {grass.Length}");
        Debug.Log($"  Objetos con tag 'Hierba': {hierba.Length}");
        Debug.Log($"  Total objetos de hierba: {totalHierba}");
        
        if (totalHierba == 0)
        {
            Debug.LogError("  ‚ùå NO HAY OBJETOS DE HIERBA EN LA ESCENA!");
            Debug.LogError("     Crea objetos y as√≠gnales el tag 'Grass' o 'Hierba'");
        }
        else
        {
            Debug.Log("  ‚úÖ Objetos de hierba encontrados");
        }
    }
    
    private void VerificarTags()
    {
        Debug.Log("üè∑Ô∏è Verificando tags necesarios...");
        
        string[] tagsNecesarios = { "Grass", "Hierba", "Ciervo", "Lobo", "Jabali" };
        
        foreach (string tag in tagsNecesarios)
        {
            try
            {
                GameObject.FindGameObjectWithTag(tag);
                Debug.Log($"  ‚úÖ Tag '{tag}' existe");
            }
            catch (UnityException)
            {
                Debug.LogWarning($"  ‚ö†Ô∏è Tag '{tag}' no existe en el proyecto");
            }
        }
    }
    
    private void VerificarNavMesh()
    {
        Debug.Log("üó∫Ô∏è Verificando NavMesh...");
        
        UnityEngine.AI.NavMeshAgent[] agents = FindObjectsOfType<UnityEngine.AI.NavMeshAgent>();
        Debug.Log($"  NavMeshAgents encontrados: {agents.Length}");
        
        foreach (var agent in agents)
        {
            if (!agent.isOnNavMesh)
            {
                Debug.LogWarning($"  ‚ö†Ô∏è {agent.name} NO est√° en el NavMesh");
            }
        }
        
        if (UnityEngine.AI.NavMesh.GetAreaCost(0) >= 0)
        {
            Debug.Log("  ‚úÖ NavMesh parece estar configurado");
        }
        else
        {
            Debug.LogWarning("  ‚ö†Ô∏è NavMesh puede no estar configurado correctamente");
        }
    }
}
